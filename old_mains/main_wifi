#define GPIO0 0    // purple
#define GPIO2 2    // green
#define GPIO1_TX 1 // blue
#define GPIO3_RX 3 // yellow

#include <Arduino.h>
#include <ESP8266WiFi.h>

void setup()
{
  Serial.begin(9600);
  Serial.println(F("\n"));

  Serial.println(F("Setting WIFI_STA"));
  WiFi.mode(WIFI_STA);
  Serial.print(F("Connecting: "));
  auto status = WiFi.begin("AthenaTurbo", "branquelasamoieda");
  Serial.println(String(status));

  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.print(F("."));
  }

  Serial.println(F("WiFi connected"));
  Serial.print(F("IP address: "));
  Serial.println(WiFi.localIP().toString());
}

void loop()
{
  static bool wait = false;

  Serial.print("connecting to djxmmx.net:17");

  // Use WiFiClient class to create TCP connections
  WiFiClient client;
  if (!client.connect("djxmmx.net", 17))
  {
    Serial.println("connection failed");
    delay(5000);
    return;
  }

  // This will send a string to the server
  Serial.println("sending data to server");
  if (client.connected())
  {
    client.println("hello from ESP8266");
  }

  // wait for data to be available
  unsigned long timeout = millis();
  while (client.available() == 0)
  {
    if (millis() - timeout > 5000)
    {
      Serial.println(">>> Client Timeout !");
      client.stop();
      delay(60000);
      return;
    }
  }

  // Read all the lines of the reply from server and print them to Serial
  Serial.println("receiving from remote server");
  // not testing 'client.connected()' since we do not need to send data here
  while (client.available())
  {
    char ch = static_cast<char>(client.read());
    Serial.print(ch);
  }

  // Close the connection
  Serial.println();
  Serial.println("closing connection");
  client.stop();

  if (wait)
  {
    delay(300000); // execute once every 5 minutes, don't flood remote service
  }
  wait = true;
}
